7PATTERN MATCHING WITH 
REGULAR EXPRESSIONS
You may be familiar with searching for text 
by pressing 
CTRL
-F and entering the words 
you™re looking for. 
Regular expressions
 go one 
step further: they allow you to specify a 
pattern
 of 
text to search for. You may not know a business™s exact 
phone number, but if you live in the United States or
Canada, you know it will be three digits, followed by a hyphen, and then 
four more digits (and optionally, a three-digit area code at the start). This 
is how you, as a human, know a phone number when you see it: 415-555-
1234 is a phone number, but 4,155,551,234 is not. 
We also recognize all sorts of other text patterns every day: email 
addresses have @ symbols in the middle, US social security numbers have 
nine digits and two hyphens, website URLs often have periods and forward 
slashes, news headlines use title case, social media hashtags begin with # 
and contain no spaces, and more.
162
   Chapter 7
Regular expressions are helpful, but few non-programmers know about 
them even though most modern text editors and word processors, such as 
Microsoft Word or OpenOf˜ce, have ˜nd and ˜nd-and-replace features 
that can search based on regular expressions. Regular expressions are 
huge time-savers, not just for software users but also for programmers. In 
fact, tech writer Cory Doctorow argues that we should be teaching regular 
expressions even before programming: 
Knowing [regular expressions] can mean the difference between 
solving a problem in 3 steps and solving it in 3,000 steps. When 
you™re a nerd, you forget that the problems you solve with a cou
-ple keystrokes can take other people days of tedious, error-prone 
work to slog through.
1In this chapter, you™ll start by writing a program to ˜nd text patterns 
with
-out
 using regular expressions and then see how to use regular expressions to 
make the code much less bloated. I™ll show you basic matching with regular 
expressions and then move on to some more powerful features, such as string 
substitution and creating your own character classes. Finally, at the end of the 
chapter, you™ll write a program that can automatically extract phone numbers 
and email addresses from a block of text.
Finding Patterns of Text Without Regular Expressions
Say you want to ˜nd an American phone number in a string. You know the 
pattern if you™re American: three numbers, a hyphen, three numbers, a 
hyphen, and four numbers. Here™s an example: 415-555-4242.
Let™s use a function named 
isPhoneNumber() to check whether a string 
matches this pattern, returning either 
True or 
False. Open a new ˜le editor 
tab and enter the following code; then save the ˜le as 
isPhoneNumber.py
:def isPhoneNumber(text):     if len(text) != 12:        return False    for i in range(0, 3):         if not text[i].isdecimal():            return False     if text[3] != '-':        return False    for i in range(4, 7):         if not text[i].isdecimal():            return False     if text[7] != '-':        return False1.  Cory Doctorow, ﬁHere™s What ICT Should Really Teach Kids: How to Do Regular 
Expressions,ﬂ 
Guardian
, December 4, 2012, 
http://www.theguardian.com/technology/2012
 /dec/04/ict-teach-kids-regular-expressions/
.Pattern Matching with Regular Expressions
   163
    for i in range(8, 12):         if not text[i].isdecimal():            return False     return Trueprint('Is 415-555-4242 a phone number?')print(isPhoneNumber('415-555-4242'))print('Is Moshi moshi a phone number?')print(isPhoneNumber('Moshi moshi'))When this program is run, the output looks like this:
Is 415-555-4242 a phone number?TrueIs Moshi moshi a phone number?FalseThe 
isPhoneNumber() function has code that does several checks to see 
whether the string in 
text is a valid phone number. If any of these checks 
fail, the function returns 
False. First the code checks that the string is 
exactly 12 characters 
. Then it checks that the area code (that is, the 
˜rst three characters in 
text) consists of only numeric characters 
. The 
rest of the function checks that the string follows the pattern of a phone 
number: the number must have the ˜rst hyphen after the area code 
, three more numeric characters 
, then another hyphen 
, and ˜nally 
four more numbers 
. If the program execution manages to get past all 
the checks, it returns 
True .Calling 
isPhoneNumber() with the argument 
'415-555-4242' will return 
True. Calling 
isPhoneNumber() with 
'Moshi moshi' will return 
False; the ˜rst 
test
 fails because 
'Moshi moshi' is not 12 characters long.
If you wanted to ˜nd a phone number within a larger string, you would 
have to add even more code to ˜nd the phone number pattern. Replace the 
last four 
print() function calls in 
isPhoneNumber.py
 with the following: 
message = 'Call me at 415-555-1011 tomorrow. 415-555-9999 is my office.'for i in range(len(message)):     chunk = message[i:i+12]     if isPhoneNumber(chunk):         print('Phone number found: ' + chunk)print('Done')When this program is run, the output will look like this:
Phone number found: 415-555-1011Phone number found: 415-555-9999Done164
   Chapter 7
On each iteration of the 
for loop, a new chunk of 12 characters from 
message is assigned to the variable 
chunk . For example, on the ˜rst itera
-tion, 
i is 
0, and 
chunk is assigned 
message[0:12] (that is, the string 
'Call me at 4'). On the next iteration, 
i is 
1, and 
chunk is assigned 
message[1:13] (the
 string 
'all me at 41'). In other words, on each iteration of the 
for loop,
 chunk takes on the following values:
'Call me at 4''all me at 41''ll me at 415''l me at 415-'. . . and so on.
You pass 
chunk to 
isPhoneNumber() to see whether it matches the phone 
number pattern 
, and if so, you print the chunk.
Continue to loop through 
message, and eventually the 12 characters 
in 
chunk will be a phone number. The loop goes through the entire string, 
testing each 12-character piece and printing any 
chunk it ˜nds that satis˜es 
isPhoneNumber(). Once we™re done going through 
message, we print 
Done.While the string in 
message is short in this example, it could be millions 
of characters long and the program would still run in less than a second. A 
similar program that ˜nds phone numbers using regular expressions would 
also run in less than a second, but regular expressions make it quicker to 
write these programs.
Finding Patterns of Text with Regular Expressions
The previous phone numberŒ˜nding program works, but it uses a lot of 
code to do something limited: the 
isPhoneNumber() function is 17 lines but 
can ˜nd only one pattern of phone numbers. What about a phone number 
formatted like 415.555.4242 or (415) 555-4242? What if the phone num
-ber had an extension, like 415-555-4242 x99? The 
isPhoneNumber() function 
would fail to validate them. You could add yet more code for these addi
-tional patterns, but there is an easier way.
Regular expressions, called 
regexes
 for short, are descriptions for a pat
-tern of text. For example, a 
\d in a regex stands for a digit characterŠthat 
is, any single numeral from 0 to 9. The regex 
\d\d\d-\d\d\d-\d\d\d\d is used 
by Python to match the same text pattern the previous 
isPhoneNumber() function did: a string of three numbers, a hyphen, three more numbers, 
another hyphen, and four numbers. Any other string would not match the 
\d\d\d-\d\d\d-\d\d\d\d regex.
But regular expressions can be much more sophisticated. For example, 
adding a 
3 in braces (
{3}) after a pattern is like saying, ﬁMatch this pattern 
three times.ﬂ So the slightly shorter regex 
\d{3}-\d{3}-\d{4} also matches the 
correct phone number format.
